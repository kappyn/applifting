version: '3.9'

services:
  api:
    container_name: api
    build: .
    env_file: .env.prod
    command: uvicorn app.main:app --host=0.0.0.0 --reload --log-level warning
    volumes:
      - .:/app
    expose:
      - 8000
    depends_on:
      db:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.fastapi.rule=Host(`applifting.kroupa.dev`)"
      - "traefik.http.routers.fastapi.tls=true"
      - "traefik.http.routers.fastapi.tls.certresolver=letsencrypt"

  db:
    container_name: db
    image: postgres:13-alpine
    env_file: .env.prod
    expose:
      - 5432
    volumes:
      - postgres_data:/var/lib/postgresql
    healthcheck:
      test: pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}
      interval: 5s
      timeout: 5s
      retries: 15

  migrate:
    container_name: migrate
    build: .
    env_file: .env.prod
    healthcheck:
      test: "exit 0"
    depends_on:
      db:
        condition: service_healthy
    command: alembic upgrade head
      
  traefik:
    container_name: traefik
    build:
      context: .
      dockerfile: Dockerfile.traefik
    ports:
      - 80:80
      - 443:443
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./traefik-public-certificates:/certificates"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=Host(`dashboard.applifting.kroupa.dev`) && (PathPrefix(`/`)"
      - "traefik.http.routers.dashboard.tls=true"
      - "traefik.http.routers.dashboard.tls.certresolver=letsencrypt"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=testuser:$$apr1$$jIKW.bdS$$eKXe4Lxjgy/rH65wP1iQe1"

volumes:
  postgres_data:
  traefik-public-certificates:
